<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="SettingsManager\SettingsManager.tt" #>
<#@ assembly name="$(SolutionDir)FullStopDotNet2014.Resources\bin\Debug\FullStopDotNet2014.Resources.dll" #>
<#@ assembly name="$(SolutionDir)FullStopDotNet2014.Resources\bin\Debug\FullStopDotNet2014.Data.dll" #>
<#@ assembly name="$(SolutionDir)FullStopDotNet2014.Resources\bin\Debug\Microsoft.AspNet.Identity.Core.dll" #>
<#@ assembly name="$(SolutionDir)FullStopDotNet2014.Resources\bin\Debug\Microsoft.AspNet.Identity.EntityFramework.dll" #>
<#@ assembly name="$(SolutionDir)FullStopDotNet2014.Resources\bin\Debug\EntityFramework.SqlServer.dll" #>
<#@ assembly name="$(SolutionDir)FullStopDotNet2014.Resources\bin\Debug\EntityFramework.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="FullStopDotNet2014.Data" #>
<#@ import namespace="Resources.Concrete" #>
<# //System.IO is actually used.  Not sure why Resharper thinks it's not needed #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#

    //throw new Exception(System.Data.Entity.SqlServer.SqlProviderServices.Instance.GetType().ToString());
	var hostServiceProvider = (IServiceProvider)this.Host;
	var config = new SettingsManager(hostServiceProvider);
    var connectionStringSettings = config.ConnectionStrings["DefaultConnection"];
    var currentDirectory = Path.GetDirectoryName(config.CurrentProject.FileName);
	
    var appDataDirectory = Path.Combine(currentDirectory, "App_Data");
	//|DataDirectory| would only apply to localdb, but we need to set it manually because T4 templates run in the VS directory
    var connectionString = connectionStringSettings.ConnectionString.Replace("|DataDirectory|", appDataDirectory);

	
    var resourceProvider = new DbResourceProvider();

    var resources = resourceProvider.ReadResources().Where(x => x.Culture == "en-US").ToList();

    const string summaryNewLine = @"
        /// ";
#>
using System.Globalization;
using System.Web;
using Resources.Abstract;

namespace FullStopDotNet2014.Web.Resources
{
    public class TextResources 
    {
        private readonly IResourceProvider _resourceProvider;

        public TextResources(IResourceProvider resourceProvider)
        {
            _resourceProvider = resourceProvider;
        }
	<#foreach (var resource in resources)
{ 
//We use Regex.Replace below because we need to handle any combination of \r, \n, or \r\n
#>
    /// <summary>
        /// <#= Regex.Replace(resource.Value, @"\r\n?|\n", summaryNewLine) #>
        /// </summary>        
        public IHtmlString <#=resource.Name.Replace(" ", "_")#> 
        {
            get 
            {
                return new HtmlString((string)_resourceProvider.GetResource("<#=resource.Name#>", CultureInfo.CurrentUICulture.Name));
            }
        }        
<#}#>
    }  

    public static class TextResourceKeys 
    {
	<#foreach (var resource in resources)
{#>
    /// <summary>
        /// <#= Regex.Replace(resource.Value, @"\r\n?|\n", summaryNewLine)#>
        /// </summary>        
        public const string <#=resource.Name.Replace(" ", "_")#> = "<#=resource.Name#>";
<#}#>
    }  
}